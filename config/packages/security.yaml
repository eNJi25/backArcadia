security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      stateless: true
      provider: app_user_provider
      custom_authenticator: App\Security\ApiTokenAuthenticator
      json_login:
        check_path: arcadia_api_login

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # Routes publiques accessibles sans authentification
    - { path: "^/arcadia/api/login", roles: PUBLIC_ACCESS }
    - { path: "^/arcadia/api/animal/showAnimalsHome", roles: PUBLIC_ACCESS }
    - { path: "^/arcadia/api/animal/show/\\d+$", roles: PUBLIC_ACCESS }
    - {
        path: "^/arcadia/api/animal/showlastAnimals/\\d+$",
        roles: PUBLIC_ACCESS,
      }
    - {
        path: "^/arcadia/api/animal/showAllAnimals/\\d+$",
        roles: PUBLIC_ACCESS,
      }
    - { path: "^/arcadia/api/avis/new", roles: PUBLIC_ACCESS }
    - { path: "^/arcadia/api/avis/valides", roles: PUBLIC_ACCESS }
    - { path: "^/arcadia/api/habitat/showAll", roles: PUBLIC_ACCESS }
    - { path: "^/arcadia/api/habitat/show/\\d+$", roles: PUBLIC_ACCESS }
    - { path: "^/arcadia/api/rapport/last/\\d+$", roles: PUBLIC_ACCESS }
    - { path: "^/arcadia/api/service/showAll", roles: PUBLIC_ACCESS }

    # Route spécifique nécessitant un utilisateur authentifié
    - { path: "^/arcadia/api/avis/toValidate", roles: [ROLE_USER, ROLE_ADMIN] }

    # Toutes les autres routes nécessitent un utilisateur authentifié
    - { path: "^/arcadia/api", roles: [ROLE_USER, ROLE_ADMIN] }

    # Routes nécessitant un administrateur
    - { path: "^/arcadia/api/registration", roles: ROLE_ADMIN }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
